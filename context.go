package qim

import (
	"sync"

	"github.com/joeyscat/qim/logger"
	"github.com/joeyscat/qim/wire"
	"github.com/joeyscat/qim/wire/pkt"
	"go.uber.org/zap"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// Session read only
type Session interface {
	GetChannelId() string
	GetGateId() string
	GetAccount() string
	GetRemoteIp() string
	GetApp() string
	GetTags() []string
}

type Context interface {
	Dispatcher
	SessionStorage
	Header() *pkt.Header
	ReadBody(value proto.Message) error
	Session() Session
	RespWithError(status pkt.Status, err error) error
	Resp(status pkt.Status, body proto.Message) error
	Dispatch(body proto.Message, recvs ...*Location) error
	Next()
}

type HandlerFunc func(Context)

type HandlersChain []HandlerFunc

// ContextImpl the most important part
type ContextImpl struct {
	sync.Mutex
	Dispatcher
	SessionStorage

	handlers HandlersChain
	index    int
	request  *pkt.LogicPkt
	session  Session
}

func BuildContext() Context {
	return &ContextImpl{}
}

// Dispatch implements Context
func (c *ContextImpl) Dispatch(body protoreflect.ProtoMessage, recvs ...*Location) error {
	if len(recvs) == 0 {
		return nil
	}

	packet := pkt.NewFrom(&c.request.Header)
	packet.Flag = pkt.Flag_Push
	packet.WriteBody(body)

	logger.L.Debug("<-- Dispatch", zap.Int("to.len", len(recvs)), zap.String("header", c.request.Header.String()))

	// the receivers group by the destination of gateway
	group := make(map[string][]string)
	for _, recv := range recvs {
		if recv.ChannelID == c.Session().GetChannelId() {
			continue
		}
		if _, ok := group[recv.GateID]; !ok {
			group[recv.GateID] = make([]string, 0)
		}
		group[recv.GateID] = append(group[recv.GateID], recv.ChannelID)
	}
	for gateway, ids := range group {
		err := c.Push(gateway, ids, packet)
		if err != nil {
			logger.L.Error("Push error", zap.Error(err))
		}
		return err
	}

	return nil
}

// Header implements Context
func (c *ContextImpl) Header() *pkt.Header {
	return &c.request.Header
}

// Next implements Context
func (c *ContextImpl) Next() {
	if c.index >= len(c.handlers) {
		return
	}

	f := c.handlers[c.index]
	c.index++
	if f == nil {
		logger.L.Warn("arrived unknown HandlerFunc")
		return
	}
	f(c)
}

// ReadBody implements Context
func (c *ContextImpl) ReadBody(value protoreflect.ProtoMessage) error {
	return c.request.ReadBody(value)
}

// Resp implements Context
func (c *ContextImpl) Resp(status pkt.Status, body protoreflect.ProtoMessage) error {
	packet := pkt.NewFrom(&c.request.Header)
	packet.Status = status
	packet.WriteBody(body)
	packet.Flag = pkt.Flag_Response
	logger.L.Debug("<-- Resp", zap.String("toAccount", c.session.GetAccount()),
		zap.String("header", c.request.Header.String()),
		zap.String("status", status.String()),
		zap.Any("body", body),
	)

	err := c.Push(c.Session().GetGateId(), []string{c.session.GetChannelId()}, packet)
	if err != nil {
		logger.L.Error("Push error", zap.Error(err))
	}
	return err
}

// RespWithError implements Context
func (c *ContextImpl) RespWithError(status pkt.Status, err error) error {
	return c.Resp(status, &pkt.ErrorResp{Message: err.Error()})
}

// Session implements Context
func (c *ContextImpl) Session() Session {
	if c.session == nil {
		server, _ := c.request.GetMeta(wire.MetaDestServer)
		c.session = &pkt.Session{
			ChannelId: c.request.ChannelId,
			GateId:    server.(string),
			Tags:      []string{"AutoGenerated"},
		}
	}

	return c.session
}

func (c *ContextImpl) reset() {
	c.request = nil
	c.index = 0
	c.handlers = nil
	c.session = nil
}
